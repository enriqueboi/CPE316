
ExecutionTime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001770  08001770  00002770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b0  080017b0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080017b0  080017b0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017b0  080017b0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b0  080017b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017b4  080017b4  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080017b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080017c4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080017c4  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ea9  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e97  00000000  00000000  00006ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00007d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003e5  00000000  00000000  000082d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024988  00000000  00000000  000086bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005382  00000000  00000000  0002d045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e18f0  00000000  00000000  000323c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001460  00000000  00000000  00113cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011515c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001758 	.word	0x08001758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001758 	.word	0x08001758

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <main>:

    void SystemClock_Config(void);
    double TestFunction(double num);

    int main(void)
    {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
    double main_var = 0;
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	f04f 0300 	mov.w	r3, #0
 800054e:	e9c7 2300 	strd	r2, r3, [r7]

    HAL_Init();
 8000552:	f000 f94e 	bl	80007f2 <HAL_Init>
    SystemClock_Config();
 8000556:	f000 f871 	bl	800063c <SystemClock_Config>

    // configure PC0, PC1 for GPIO output, push-pull
    // no pull up / pull down, high speed
    RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <main+0xa8>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a22      	ldr	r2, [pc, #136]	@ (80005e8 <main+0xa8>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000566:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <main+0xac>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <main+0xac>)
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   |=  (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0);
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <main+0xac>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a1d      	ldr	r2, [pc, #116]	@ (80005ec <main+0xac>)
 8000578:	f043 0305 	orr.w	r3, r3, #5
 800057c:	6013      	str	r3, [r2, #0]
    GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 800057e:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <main+0xac>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <main+0xac>)
 8000584:	f023 0303 	bic.w	r3, r3, #3
 8000588:	6053      	str	r3, [r2, #4]
    GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1);
 800058a:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <main+0xac>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	4a17      	ldr	r2, [pc, #92]	@ (80005ec <main+0xac>)
 8000590:	f023 030f 	bic.w	r3, r3, #15
 8000594:	60d3      	str	r3, [r2, #12]
    GPIOC->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED0_Pos) |
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <main+0xac>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <main+0xac>)
 800059c:	f043 030f 	orr.w	r3, r3, #15
 80005a0:	6093      	str	r3, [r2, #8]
                        (3 << GPIO_OSPEEDR_OSPEED1_Pos));
    GPIOC->BRR = (GPIO_PIN_0);   // preset PC0, PC1 to 0
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <main+0xac>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28



    while (1){      // infinite loop to avoid program exit
        main_var++;  // added to eliminate not used warning
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <main+0xb0>)
 80005ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80005b2:	f7ff fe0f 	bl	80001d4 <__adddf3>
 80005b6:	4602      	mov	r2, r0
 80005b8:	460b      	mov	r3, r1
 80005ba:	e9c7 2300 	strd	r2, r3, [r7]
        GPIOC->BSRR = (GPIO_PIN_0);               // turn on PC0
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <main+0xac>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	619a      	str	r2, [r3, #24]
        main_var = TestFunction(15);              // test function being timed
 80005c4:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 80005e0 <main+0xa0>
 80005c8:	f000 f814 	bl	80005f4 <TestFunction>
 80005cc:	ed87 0b00 	vstr	d0, [r7]
        GPIOC->BRR = (GPIO_PIN_0);                // turn off PC0
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <main+0xac>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	629a      	str	r2, [r3, #40]	@ 0x28
        main_var++;  // added to eliminate not used warning
 80005d6:	bf00      	nop
 80005d8:	e7e6      	b.n	80005a8 <main+0x68>
 80005da:	bf00      	nop
 80005dc:	f3af 8000 	nop.w
 80005e0:	00000000 	.word	0x00000000
 80005e4:	402e0000 	.word	0x402e0000
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000800 	.word	0x48000800
 80005f0:	3ff00000 	.word	0x3ff00000

080005f4 <TestFunction>:
    //    HAL_Delay(500);
    }
    }

    double TestFunction(double num) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	ed87 0b00 	vstr	d0, [r7]

    double test_var = 0;  				// local variable
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	f04f 0300 	mov.w	r3, #0
 8000606:	e9c7 2302 	strd	r2, r3, [r7, #8]

    test_var = num + 1;
 800060a:	f04f 0200 	mov.w	r2, #0
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <TestFunction+0x44>)
 8000610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000614:	f7ff fdde 	bl	80001d4 <__adddf3>
 8000618:	4602      	mov	r2, r0
 800061a:	460b      	mov	r3, r1
 800061c:	e9c7 2302 	strd	r2, r3, [r7, #8]
//       test_var = num * 3;
//       test_var = num / 3;
//       test_var = sin(num);
    //  HAL_Delay(500);
    return test_var;
 8000620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000624:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000628:	eeb0 0a47 	vmov.f32	s0, s14
 800062c:	eef0 0a67 	vmov.f32	s1, s15
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	3ff00000 	.word	0x3ff00000

0800063c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	@ 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	@ 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f858 	bl	8001700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000662:	f000 fa2f 	bl	8000ac4 <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f82c 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000670:	2310      	movs	r3, #16
 8000672:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800067c:	2360      	movs	r3, #96	@ 0x60
 800067e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa71 	bl	8000b70 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000694:	f000 f818 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe39 	bl	8001328 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006bc:	f000 f804 	bl	80006c8 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3758      	adds	r7, #88	@ 0x58
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	@ (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f893 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 ff9f 	bl	8001710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d2:	f7ff feb5 	bl	8000540 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	080017b8 	.word	0x080017b8
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	2000002c 	.word	0x2000002c

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>

080007f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f91f 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f80e 	bl	8000824 <HAL_InitTick>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	e001      	b.n	8000818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000814:	f7ff ff5e 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000818:	79fb      	ldrb	r3, [r7, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <HAL_InitTick+0x6c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d023      	beq.n	8000880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_InitTick+0x70>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f91d 	bl	8000a8e <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10f      	bne.n	800087a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d809      	bhi.n	8000874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8f5 	bl	8000a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_InitTick+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	e007      	b.n	8000884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e004      	b.n	8000884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e001      	b.n	8000884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	20000000 	.word	0x20000000
 8000898:	20000004 	.word	0x20000004

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000028 	.word	0x20000028

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	@ (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	@ (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	@ 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff47 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff5c 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff8e 	bl	8000994 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffb0 	bl	80009fc <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000aac:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ad2:	d130      	bne.n	8000b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad4:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ae0:	d038      	beq.n	8000b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000aea:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000aec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2232      	movs	r2, #50	@ 0x32
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	3301      	adds	r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b08:	e002      	b.n	8000b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b1c:	d102      	bne.n	8000b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f2      	bne.n	8000b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b30:	d110      	bne.n	8000b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e00f      	b.n	8000b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b42:	d007      	beq.n	8000b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b44:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b4c:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40007000 	.word	0x40007000
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	431bde83 	.word	0x431bde83

08000b70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e3ca      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b82:	4b97      	ldr	r3, [pc, #604]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
 8000b8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b8c:	4b94      	ldr	r3, [pc, #592]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 80e4 	beq.w	8000d6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_RCC_OscConfig+0x4a>
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	2b0c      	cmp	r3, #12
 8000bae:	f040 808b 	bne.w	8000cc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	f040 8087 	bne.w	8000cc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bba:	4b89      	ldr	r3, [pc, #548]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d005      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x62>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e3a2      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a1a      	ldr	r2, [r3, #32]
 8000bd6:	4b82      	ldr	r3, [pc, #520]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <HAL_RCC_OscConfig+0x7c>
 8000be2:	4b7f      	ldr	r3, [pc, #508]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bea:	e005      	b.n	8000bf8 <HAL_RCC_OscConfig+0x88>
 8000bec:	4b7c      	ldr	r3, [pc, #496]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d223      	bcs.n	8000c44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fd1d 	bl	8001640 <RCC_SetFlashLatencyFromMSIRange>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e383      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c10:	4b73      	ldr	r3, [pc, #460]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a72      	ldr	r2, [pc, #456]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b70      	ldr	r3, [pc, #448]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	496d      	ldr	r1, [pc, #436]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	4968      	ldr	r1, [pc, #416]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	604b      	str	r3, [r1, #4]
 8000c42:	e025      	b.n	8000c90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c44:	4b66      	ldr	r3, [pc, #408]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a65      	ldr	r2, [pc, #404]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b63      	ldr	r3, [pc, #396]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4960      	ldr	r1, [pc, #384]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c62:	4b5f      	ldr	r3, [pc, #380]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	495b      	ldr	r1, [pc, #364]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fcdd 	bl	8001640 <RCC_SetFlashLatencyFromMSIRange>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e343      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000c90:	f000 fc4a 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 8000c94:	4602      	mov	r2, r0
 8000c96:	4b52      	ldr	r3, [pc, #328]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	4950      	ldr	r1, [pc, #320]	@ (8000de4 <HAL_RCC_OscConfig+0x274>)
 8000ca2:	5ccb      	ldrb	r3, [r1, r3]
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cac:	4a4e      	ldr	r2, [pc, #312]	@ (8000de8 <HAL_RCC_OscConfig+0x278>)
 8000cae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000dec <HAL_RCC_OscConfig+0x27c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fdb5 	bl	8000824 <HAL_InitTick>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d052      	beq.n	8000d6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	e327      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d032      	beq.n	8000d36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000cd0:	4b43      	ldr	r3, [pc, #268]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a42      	ldr	r2, [pc, #264]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fdf2 	bl	80008c4 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fdee 	bl	80008c4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e310      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d02:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a36      	ldr	r2, [pc, #216]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b34      	ldr	r3, [pc, #208]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	4931      	ldr	r1, [pc, #196]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	492c      	ldr	r1, [pc, #176]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
 8000d34:	e01a      	b.n	8000d6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a29      	ldr	r2, [pc, #164]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d3c:	f023 0301 	bic.w	r3, r3, #1
 8000d40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fdbf 	bl	80008c4 <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fdbb 	bl	80008c4 <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e2dd      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f0      	bne.n	8000d4a <HAL_RCC_OscConfig+0x1da>
 8000d68:	e000      	b.n	8000d6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d074      	beq.n	8000e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x21a>
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	2b0c      	cmp	r3, #12
 8000d82:	d10e      	bne.n	8000da2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d10b      	bne.n	8000da2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d064      	beq.n	8000e60 <HAL_RCC_OscConfig+0x2f0>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d160      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e2ba      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x24a>
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e026      	b.n	8000e08 <HAL_RCC_OscConfig+0x298>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dc2:	d115      	bne.n	8000df0 <HAL_RCC_OscConfig+0x280>
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000dca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a02      	ldr	r2, [pc, #8]	@ (8000de0 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e014      	b.n	8000e08 <HAL_RCC_OscConfig+0x298>
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000
 8000de4:	08001770 	.word	0x08001770
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000004 	.word	0x20000004
 8000df0:	4ba0      	ldr	r3, [pc, #640]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a9f      	ldr	r2, [pc, #636]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b9d      	ldr	r3, [pc, #628]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a9c      	ldr	r2, [pc, #624]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d013      	beq.n	8000e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e10:	f7ff fd58 	bl	80008c4 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e18:	f7ff fd54 	bl	80008c4 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b64      	cmp	r3, #100	@ 0x64
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e276      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e2a:	4b92      	ldr	r3, [pc, #584]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0x2a8>
 8000e36:	e014      	b.n	8000e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e38:	f7ff fd44 	bl	80008c4 <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fd40 	bl	80008c4 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	@ 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e262      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e52:	4b88      	ldr	r3, [pc, #544]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x2d0>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d060      	beq.n	8000f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d005      	beq.n	8000e80 <HAL_RCC_OscConfig+0x310>
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2b0c      	cmp	r3, #12
 8000e78:	d119      	bne.n	8000eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d116      	bne.n	8000eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e80:	4b7c      	ldr	r3, [pc, #496]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <HAL_RCC_OscConfig+0x328>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e23f      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e98:	4b76      	ldr	r3, [pc, #472]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	061b      	lsls	r3, r3, #24
 8000ea6:	4973      	ldr	r1, [pc, #460]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eac:	e040      	b.n	8000f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d023      	beq.n	8000efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6e      	ldr	r2, [pc, #440]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fcff 	bl	80008c4 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fcfb 	bl	80008c4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e21d      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000edc:	4b65      	ldr	r3, [pc, #404]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee8:	4b62      	ldr	r3, [pc, #392]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	061b      	lsls	r3, r3, #24
 8000ef6:	495f      	ldr	r1, [pc, #380]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e018      	b.n	8000f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efe:	4b5d      	ldr	r3, [pc, #372]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a5c      	ldr	r2, [pc, #368]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fcdb 	bl	80008c4 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fcd7 	bl	80008c4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e1f9      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f24:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d03c      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01c      	beq.n	8000f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f44:	4b4b      	ldr	r3, [pc, #300]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f54:	f7ff fcb6 	bl	80008c4 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fcb2 	bl	80008c4 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1d4      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f6e:	4b41      	ldr	r3, [pc, #260]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ef      	beq.n	8000f5c <HAL_RCC_OscConfig+0x3ec>
 8000f7c:	e01b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f84:	4a3b      	ldr	r2, [pc, #236]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000f86:	f023 0301 	bic.w	r3, r3, #1
 8000f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f8e:	f7ff fc99 	bl	80008c4 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f96:	f7ff fc95 	bl	80008c4 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e1b7      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1ef      	bne.n	8000f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80a6 	beq.w	8001110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10d      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd8:	4a26      	ldr	r2, [pc, #152]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe0:	4b24      	ldr	r3, [pc, #144]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fec:	2301      	movs	r3, #1
 8000fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff0:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_RCC_OscConfig+0x508>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d118      	bne.n	800102e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <HAL_RCC_OscConfig+0x508>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <HAL_RCC_OscConfig+0x508>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001008:	f7ff fc5c 	bl	80008c4 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001010:	f7ff fc58 	bl	80008c4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e17a      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_RCC_OscConfig+0x508>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d108      	bne.n	8001048 <HAL_RCC_OscConfig+0x4d8>
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8001038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001046:	e029      	b.n	800109c <HAL_RCC_OscConfig+0x52c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d115      	bne.n	800107c <HAL_RCC_OscConfig+0x50c>
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8001052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001056:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8001062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001066:	4a03      	ldr	r2, [pc, #12]	@ (8001074 <HAL_RCC_OscConfig+0x504>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001070:	e014      	b.n	800109c <HAL_RCC_OscConfig+0x52c>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40007000 	.word	0x40007000
 800107c:	4b9c      	ldr	r3, [pc, #624]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001082:	4a9b      	ldr	r2, [pc, #620]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001084:	f023 0301 	bic.w	r3, r3, #1
 8001088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800108c:	4b98      	ldr	r3, [pc, #608]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001092:	4a97      	ldr	r2, [pc, #604]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001094:	f023 0304 	bic.w	r3, r3, #4
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d016      	beq.n	80010d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc0e 	bl	80008c4 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010aa:	e00a      	b.n	80010c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc0a 	bl	80008c4 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e12a      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010c2:	4b8b      	ldr	r3, [pc, #556]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80010c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0ed      	beq.n	80010ac <HAL_RCC_OscConfig+0x53c>
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d2:	f7ff fbf7 	bl	80008c4 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fbf3 	bl	80008c4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e113      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f0:	4b7f      	ldr	r3, [pc, #508]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80010f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1ed      	bne.n	80010da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001104:	4b7a      	ldr	r3, [pc, #488]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001108:	4a79      	ldr	r2, [pc, #484]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800110a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800110e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80fe 	beq.w	8001316 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111e:	2b02      	cmp	r3, #2
 8001120:	f040 80d0 	bne.w	80012c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001124:	4b72      	ldr	r3, [pc, #456]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001134:	429a      	cmp	r2, r3
 8001136:	d130      	bne.n	800119a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	3b01      	subs	r3, #1
 8001144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001146:	429a      	cmp	r2, r3
 8001148:	d127      	bne.n	800119a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001154:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001156:	429a      	cmp	r2, r3
 8001158:	d11f      	bne.n	800119a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001164:	2a07      	cmp	r2, #7
 8001166:	bf14      	ite	ne
 8001168:	2201      	movne	r2, #1
 800116a:	2200      	moveq	r2, #0
 800116c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800116e:	4293      	cmp	r3, r2
 8001170:	d113      	bne.n	800119a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117c:	085b      	lsrs	r3, r3, #1
 800117e:	3b01      	subs	r3, #1
 8001180:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d109      	bne.n	800119a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	3b01      	subs	r3, #1
 8001194:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001196:	429a      	cmp	r2, r3
 8001198:	d06e      	beq.n	8001278 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d069      	beq.n	8001274 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80011a0:	4b53      	ldr	r3, [pc, #332]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80011ac:	4b50      	ldr	r3, [pc, #320]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0ad      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80011bc:	4b4c      	ldr	r3, [pc, #304]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4b      	ldr	r2, [pc, #300]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011c8:	f7ff fb7c 	bl	80008c4 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d0:	f7ff fb78 	bl	80008c4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e09a      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e2:	4b43      	ldr	r3, [pc, #268]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ee:	4b40      	ldr	r3, [pc, #256]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <HAL_RCC_OscConfig+0x784>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80011fe:	3a01      	subs	r2, #1
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	4311      	orrs	r1, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001208:	0212      	lsls	r2, r2, #8
 800120a:	4311      	orrs	r1, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001210:	0852      	lsrs	r2, r2, #1
 8001212:	3a01      	subs	r2, #1
 8001214:	0552      	lsls	r2, r2, #21
 8001216:	4311      	orrs	r1, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800121c:	0852      	lsrs	r2, r2, #1
 800121e:	3a01      	subs	r2, #1
 8001220:	0652      	lsls	r2, r2, #25
 8001222:	4311      	orrs	r1, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001228:	0912      	lsrs	r2, r2, #4
 800122a:	0452      	lsls	r2, r2, #17
 800122c:	430a      	orrs	r2, r1
 800122e:	4930      	ldr	r1, [pc, #192]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001230:	4313      	orrs	r3, r2
 8001232:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800123a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800124a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800124c:	f7ff fb3a 	bl	80008c4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fb36 	bl	80008c4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e058      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001272:	e050      	b.n	8001316 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e04f      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d148      	bne.n	8001316 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 800128a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800128e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 8001296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800129a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800129c:	f7ff fb12 	bl	80008c4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fb0e 	bl	80008c4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e030      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x734>
 80012c2:	e028      	b.n	8001316 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b0c      	cmp	r3, #12
 80012c8:	d023      	beq.n	8001312 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_RCC_OscConfig+0x780>)
 80012d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff faf5 	bl	80008c4 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012dc:	e00c      	b.n	80012f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012de:	f7ff faf1 	bl	80008c4 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d905      	bls.n	80012f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e013      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
 80012f0:	40021000 	.word	0x40021000
 80012f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_RCC_OscConfig+0x7b0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ec      	bne.n	80012de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_RCC_OscConfig+0x7b0>)
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	4905      	ldr	r1, [pc, #20]	@ (8001320 <HAL_RCC_OscConfig+0x7b0>)
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_RCC_OscConfig+0x7b4>)
 800130c:	4013      	ands	r3, r2
 800130e:	60cb      	str	r3, [r1, #12]
 8001310:	e001      	b.n	8001316 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	feeefffc 	.word	0xfeeefffc

08001328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0e7      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b75      	ldr	r3, [pc, #468]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d910      	bls.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4970      	ldr	r1, [pc, #448]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b6e      	ldr	r3, [pc, #440]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0cf      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d010      	beq.n	800139a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001384:	429a      	cmp	r2, r3
 8001386:	d908      	bls.n	800139a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001388:	4b63      	ldr	r3, [pc, #396]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4960      	ldr	r1, [pc, #384]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001396:	4313      	orrs	r3, r2
 8001398:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d04c      	beq.n	8001440 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d107      	bne.n	80013be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d121      	bne.n	80013fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0a6      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d115      	bne.n	80013fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e09a      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013de:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e08e      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e086      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b46      	ldr	r3, [pc, #280]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4943      	ldr	r1, [pc, #268]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001410:	f7ff fa58 	bl	80008c4 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fa54 	bl	80008c4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e06e      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d010      	beq.n	800146e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001458:	429a      	cmp	r2, r3
 800145a:	d208      	bcs.n	800146e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b2e      	ldr	r3, [pc, #184]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	492b      	ldr	r1, [pc, #172]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d210      	bcs.n	800149e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 0207 	bic.w	r2, r3, #7
 8001484:	4923      	ldr	r1, [pc, #140]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <HAL_RCC_ClockConfig+0x1ec>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d001      	beq.n	800149e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e036      	b.n	800150c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d009      	beq.n	80014dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4910      	ldr	r1, [pc, #64]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014dc:	f000 f824 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_RCC_ClockConfig+0x1f0>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	490b      	ldr	r1, [pc, #44]	@ (800151c <HAL_RCC_ClockConfig+0x1f4>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
 80014f8:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_RCC_ClockConfig+0x1f8>)
 80014fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <HAL_RCC_ClockConfig+0x1fc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f98f 	bl	8000824 <HAL_InitTick>
 8001506:	4603      	mov	r3, r0
 8001508:	72fb      	strb	r3, [r7, #11]

  return status;
 800150a:	7afb      	ldrb	r3, [r7, #11]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40022000 	.word	0x40022000
 8001518:	40021000 	.word	0x40021000
 800151c:	08001770 	.word	0x08001770
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001536:	4b3e      	ldr	r3, [pc, #248]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001540:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_GetSysClockFreq+0x34>
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b0c      	cmp	r3, #12
 8001554:	d121      	bne.n	800159a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d11e      	bne.n	800159a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800155c:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e005      	b.n	8001584 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001578:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001584:	4a2b      	ldr	r2, [pc, #172]	@ (8001634 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10d      	bne.n	80015b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a0:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x110>)
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	e004      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <HAL_RCC_GetSysClockFreq+0x114>)
 80015ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d134      	bne.n	8001620 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0xa6>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d003      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0xac>
 80015cc:	e005      	b.n	80015da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x110>)
 80015d0:	617b      	str	r3, [r7, #20]
      break;
 80015d2:	e005      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_RCC_GetSysClockFreq+0x114>)
 80015d6:	617b      	str	r3, [r7, #20]
      break;
 80015d8:	e002      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	617b      	str	r3, [r7, #20]
      break;
 80015de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	0a1b      	lsrs	r3, r3, #8
 80015f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	fb03 f202 	mul.w	r2, r3, r2
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_RCC_GetSysClockFreq+0x108>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	0e5b      	lsrs	r3, r3, #25
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	3301      	adds	r3, #1
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001620:	69bb      	ldr	r3, [r7, #24]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	08001780 	.word	0x08001780
 8001638:	00f42400 	.word	0x00f42400
 800163c:	007a1200 	.word	0x007a1200

08001640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800164c:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001658:	f7ff fa26 	bl	8000aa8 <HAL_PWREx_GetVoltageRange>
 800165c:	6178      	str	r0, [r7, #20]
 800165e:	e014      	b.n	800168a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	4b25      	ldr	r3, [pc, #148]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001664:	4a24      	ldr	r2, [pc, #144]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166a:	6593      	str	r3, [r2, #88]	@ 0x58
 800166c:	4b22      	ldr	r3, [pc, #136]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001678:	f7ff fa16 	bl	8000aa8 <HAL_PWREx_GetVoltageRange>
 800167c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001690:	d10b      	bne.n	80016aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b80      	cmp	r3, #128	@ 0x80
 8001696:	d919      	bls.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2ba0      	cmp	r3, #160	@ 0xa0
 800169c:	d902      	bls.n	80016a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800169e:	2302      	movs	r3, #2
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	e013      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016a4:	2301      	movs	r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	e010      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b80      	cmp	r3, #128	@ 0x80
 80016ae:	d902      	bls.n	80016b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016b0:	2303      	movs	r3, #3
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	e00a      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b80      	cmp	r3, #128	@ 0x80
 80016ba:	d102      	bne.n	80016c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e004      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b70      	cmp	r3, #112	@ 0x70
 80016c6:	d101      	bne.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 0207 	bic.w	r2, r3, #7
 80016d4:	4909      	ldr	r1, [pc, #36]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40022000 	.word	0x40022000

08001700 <memset>:
 8001700:	4402      	add	r2, r0
 8001702:	4603      	mov	r3, r0
 8001704:	4293      	cmp	r3, r2
 8001706:	d100      	bne.n	800170a <memset+0xa>
 8001708:	4770      	bx	lr
 800170a:	f803 1b01 	strb.w	r1, [r3], #1
 800170e:	e7f9      	b.n	8001704 <memset+0x4>

08001710 <__libc_init_array>:
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	4d0d      	ldr	r5, [pc, #52]	@ (8001748 <__libc_init_array+0x38>)
 8001714:	4c0d      	ldr	r4, [pc, #52]	@ (800174c <__libc_init_array+0x3c>)
 8001716:	1b64      	subs	r4, r4, r5
 8001718:	10a4      	asrs	r4, r4, #2
 800171a:	2600      	movs	r6, #0
 800171c:	42a6      	cmp	r6, r4
 800171e:	d109      	bne.n	8001734 <__libc_init_array+0x24>
 8001720:	4d0b      	ldr	r5, [pc, #44]	@ (8001750 <__libc_init_array+0x40>)
 8001722:	4c0c      	ldr	r4, [pc, #48]	@ (8001754 <__libc_init_array+0x44>)
 8001724:	f000 f818 	bl	8001758 <_init>
 8001728:	1b64      	subs	r4, r4, r5
 800172a:	10a4      	asrs	r4, r4, #2
 800172c:	2600      	movs	r6, #0
 800172e:	42a6      	cmp	r6, r4
 8001730:	d105      	bne.n	800173e <__libc_init_array+0x2e>
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	f855 3b04 	ldr.w	r3, [r5], #4
 8001738:	4798      	blx	r3
 800173a:	3601      	adds	r6, #1
 800173c:	e7ee      	b.n	800171c <__libc_init_array+0xc>
 800173e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001742:	4798      	blx	r3
 8001744:	3601      	adds	r6, #1
 8001746:	e7f2      	b.n	800172e <__libc_init_array+0x1e>
 8001748:	080017b0 	.word	0x080017b0
 800174c:	080017b0 	.word	0x080017b0
 8001750:	080017b0 	.word	0x080017b0
 8001754:	080017b4 	.word	0x080017b4

08001758 <_init>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr

08001764 <_fini>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr
