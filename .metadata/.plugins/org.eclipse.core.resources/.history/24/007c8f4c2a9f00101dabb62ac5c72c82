#include "main.h"
#include <math.h>


void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void numcheck(int num);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
//  HAL_GPIO_Init();


  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN | RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOBEN);



  GPIOC->MODER &= ~(GPIO_MODER_MODE0);

  GPIOC->MODER |= GPIO_MODER_MODE0_0;



  GPIOC->MODER &= ~(GPIO_MODER_MODE1);

  GPIOC->MODER |= GPIO_MODER_MODE1_0;



  GPIOC->MODER &= ~(GPIO_MODER_MODE2);

  GPIOC->MODER |= GPIO_MODER_MODE2_0;



  //Output

  GPIOA->MODER &= ~(GPIO_MODER_MODE3);

  GPIOA->MODER |= GPIO_MODER_MODE3_0;



  GPIOA->MODER &= ~(GPIO_MODER_MODE2);

  GPIOA->MODER |= GPIO_MODER_MODE2_0;



  GPIOA->MODER &= ~(GPIO_MODER_MODE10);

  GPIOA->MODER |= GPIO_MODER_MODE10_0;



  // GPIOB->MODER |= GPIO_MODER_MODE3_0;



  //input

  GPIOB->MODER &= ~(GPIO_MODER_MODE3);

  GPIOB->MODER &= ~(GPIO_MODER_MODE5);

  GPIOB->MODER &= ~(GPIO_MODER_MODE4);

  GPIOB->MODER &= ~(GPIO_MODER_MODE10);



  //So we're setting the state

  //   //So we're setting the states into

  //   GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD5);

  //   GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4);

  //   GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD10);

  //   GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD3);

    GPIOB->PUPDR |= GPIO_PUPDR_PUPD3_1;
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD4_1;
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_1;
    GPIOB->PUPDR |= GPIO_PUPDR_PUPD5_1;




  //ALL OUTPUTS LOW

  GPIOA->BSRR = GPIO_PIN_3;

  GPIOA->BRR = GPIO_PIN_2;

  GPIOA->BRR = GPIO_PIN_10;

  // GPIOB->BRR = GPIO_PIN_3;



 GPIOC->BRR = GPIO_PIN_0;

 GPIOC->BRR = GPIO_PIN_1;

 GPIOC->BRR = GPIO_PIN_2;

 GPIOC->BRR = GPIO_PIN_3;



 //GPIOB 3 5 4 10





  while (1){

//	GPIOA->BRR = GPIO_PIN_10;
    GPIOA->BSRR = GPIO_PIN_2;

    if(GPIOB->IDR & GPIO_PIN_3){
    	 GPIOC->BSRR = GPIO_PIN_0;
    	 GPIOC->BSRR = GPIO_PIN_1;
    	 GPIOC->BSRR = GPIO_PIN_2;
    	 GPIOC->BSRR = GPIO_PIN_3;
    	 HAL_Delay(2000);

    }
    else{
    	GPIOC->BRR = GPIO_PIN_0;
    	GPIOC->BRR = GPIO_PIN_1;
    	GPIOC->BRR = GPIO_PIN_2;
    	GPIOC->BRR = GPIO_PIN_3;
    }

//    	numcheck(1);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_5))
//
//    	numcheck(4);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_4))
//    	numcheck(7);
//
//    else if(GPIOB->IDR & (GPIO_PIN_10))
//		numcheck(10);
//
//
//
//
//
//    GPIOA->BRR = GPIO_PIN_3;
//
//    GPIOA->BSRR = GPIO_PIN_2;
//
//    if(GPIOB->IDR & (GPIO_PIN_3))
//
//    	numcheck(2);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_5))
//
//    	numcheck(5);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_4))
//
//    	numcheck(8);
//
//    else if(GPIOB->IDR & (GPIO_PIN_10))
//    		numcheck(0);
//
//
//
//    GPIOA->BRR = GPIO_PIN_2;
//
//    GPIOA->BSRR = GPIO_PIN_10;
//
//    if(GPIOB->IDR & (GPIO_PIN_3))
//
//    	numcheck(3);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_5))
//
//    	numcheck(6);
//
//
//
//    else if(GPIOB->IDR & (GPIO_PIN_4))
//
//    	numcheck(9);
//
//    else if(GPIOB->IDR & (GPIO_PIN_10))
//    	numcheck(11);

  }

  /* USER CODE END 3 */

}


void numcheck(int num){
  switch (num){
    case 0:
      GPIOC->BRR = GPIO_PIN_0;
      GPIOC->BRR = GPIO_PIN_1;
      GPIOC->BRR = GPIO_PIN_2;
      GPIOC->BRR = GPIO_PIN_3;
      break;

    case 1:
        GPIOC->BSRR = GPIO_PIN_0;
        GPIOC->BRR = GPIO_PIN_1;
        GPIOC->BRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 2:
        GPIOC->BRR = GPIO_PIN_0;
        GPIOC->BSRR = GPIO_PIN_1;
        GPIOC->BRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 3:
        GPIOC->BSRR = GPIO_PIN_0;
        GPIOC->BSRR = GPIO_PIN_1;
        GPIOC->BRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 4:
        GPIOC->BRR = GPIO_PIN_0;
        GPIOC->BRR = GPIO_PIN_1;
        GPIOC->BSRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 5:
        GPIOC->BSRR = GPIO_PIN_0;
        GPIOC->BRR = GPIO_PIN_1;
        GPIOC->BSRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 6:
        GPIOC->BRR = GPIO_PIN_0;
        GPIOC->BSRR = GPIO_PIN_1;
        GPIOC->BSRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 7:
        GPIOC->BSRR = GPIO_PIN_0;
        GPIOC->BSRR = GPIO_PIN_1;
        GPIOC->BSRR = GPIO_PIN_2;
        GPIOC->BRR = GPIO_PIN_3;
        break;

    case 8:
        GPIOC->BRR = GPIO_PIN_0;
        GPIOC->BRR = GPIO_PIN_1;
        GPIOC->BRR = GPIO_PIN_2;
        GPIOC->BSRR = GPIO_PIN_3;
      break;

    case 9:
        GPIOC->BSRR = GPIO_PIN_0;
        GPIOC->BRR = GPIO_PIN_1;
        GPIOC->BRR = GPIO_PIN_2;
        GPIOC->BSRR = GPIO_PIN_3;
      break;

    case 10:
    //Add something for the star
      break;

    case 11:
    //Add something for the hash
      break;
  }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA2 PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
